server {
    # Uses the Nginx image filter module to dynamically resize and store the resized image on server
    # http://nginx.org/en/docs/http/ngx_http_image_filter_module.html#image_filter_jpeg_quality

	# original: https://github.com/fredpalmer/dimwit/blob/develop/nginx.conf
    # Modified from an original gist:
    # https://gist.github.com/phpdude/1451684

    listen 80;
    server_name _;
    log_subrequest on;
    rewrite_log on;

    # Needed to allow uri protocol slashes from being merged
    merge_slashes off;

    # Will proxy to external urls and gets remote images, the following will allow it to resolve properly
    resolver 8.8.8.8;  # Google DNS

    location = /favicon.ico {
        log_not_found off;
    }
	
	# this location cache results
	location ~* ^/(resize|crop)/(\d+)x(\d+)/(.+)$ {
		set $image_uri $4; # required to avoid %20 replaced by space issues
	    proxy_pass http://127.0.0.1/internal/$1?uri=$image_uri&w=$2&h=$3;
		proxy_intercept_errors on;
		error_page 415 =404 /404.html;
        proxy_cache aircart_thumbnails_cache;
        proxy_cache_key "$document_uri"; # removed $host so that it caches independant of access host/ip
        proxy_cache_valid 200 1d;
        proxy_cache_valid any 1m;
        proxy_cache_use_stale error timeout invalid_header updating;
		proxy_temp_path /data/nginx/proxy_temp;
    }

	# TODO: cache full image using cache headers?
	
	# this location retrieves and process images
    location /internal/resize {
		proxy_pass $arg_uri;
		image_filter resize $arg_w $arg_h;
		image_filter_buffer 10M;
		allow 127.0.0.0/8;
        deny all;
    }
	location /internal/crop {
        proxy_pass $arg_uri;
		image_filter crop $arg_w $arg_h;
		image_filter_buffer 10M;
		allow 127.0.0.0/8;
        deny all;
    }

	# location = /empty {
	# 							empty_gif;
	# 				        }
}